import pytest
import sqlite3
from modules.common.database import Database

@pytest.mark.database  # –¢–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏
def test_inspect_schema():
    db = Database()
    db.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = db.cursor.fetchall()
    print("\nüì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:")
    for table in tables:
        table_name = table[0]
        print(f"\nüîπ –¢–∞–±–ª–∏—Ü—è: {table_name}")
        db.cursor.execute(f"PRAGMA table_info({table_name});")
        columns = db.cursor.fetchall()
        for col in columns:
            cid, name, dtype, notnull, default, pk = col
            print(f"  - {name} ({dtype}) {'NOT NULL' if notnull else ''} {'PK' if pk else ''}")


@pytest.mark.database           #–¢–µ—Å—Ç –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
def test_insert_invalid_data_type():
    db = Database()
    with pytest.raises(sqlite3.OperationalError):
        db.insert_product(5, '–ø–æ–º–∏–ª–∫–∞', '—Ç–∏–ø', '–Ω–µ —á–∏—Å–ª–æ')  # qnt –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º

@pytest.mark.database          #–¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–æ–±–∫—É –Ω—É–ª—å–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
def test_insert_null_quantity():
    db = Database()
    db.insert_product(6, '–Ω—É–ª—å', '—Ç–µ—Å—Ç', 0)
    qnt = db.select_product_qnt_by_id(6)
    assert qnt[0][0] == 0

@pytest.mark.database          #–¢–µ—Å—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
def test_multiple_quantity_updates():
    db = Database()
    db.insert_product(7, '–º—É–ª—å—Ç–∏', '–æ–Ω–æ–≤–ª–µ–Ω–Ω—è', 10)
    db.update_product_qnt_by_id(7, 20)
    db.update_product_qnt_by_id(7, 30)
    qnt = db.select_product_qnt_by_id(7)
    assert qnt[0][0] == 30

@pytest.mark.database         #–¢–µ—Å—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 
def test_get_address_nonexistent_user():
    db = Database()
    result = db.get_user_address_by_name('–ù–µ–≤—ñ–¥–æ–º–∏–π')
    assert result == [] or result is None

@pytest.mark.database          #–¢–µ—Å—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
def test_delete_nonexistent_product():
    db = Database()
    db.delete_product_by_id(9999)
    result = db.select_product_qnt_by_id(9999)
    assert result == [] or result is None

@pytest.mark.database      #–¢–µ—Å—Ç –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –ø—Ä–æ–¥—É–∫—Ç—É –∑ –¥–æ–≤–≥–∏–º –æ–ø–∏—Å–æ–º    
def test_insert_long_description():
    db = Database()
    long_desc = 'a' * 500
    db.insert_product(8, '–¥–æ–≤–≥–∏–π', long_desc, 5)
    qnt = db.select_product_qnt_by_id(8)
    assert qnt[0][0] == 5

@pytest.mark.database      #–¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è 
def test_order_date_format():
    db = Database()
    orders = db.get_detailed_orders()
    for order in orders:
        date = order[4]
        assert isinstance(date, str)
        assert ':' in date  # –±–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É

@pytest.mark.database
def test_inspect_schema():
    db = Database()
    db.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = db.cursor.fetchall()
    print("\nüì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:")
    for table in tables:
        table_name = table[0]
        print(f"\nüîπ –¢–∞–±–ª–∏—Ü—è: {table_name}")
        db.cursor.execute(f"PRAGMA table_info({table_name});")
        columns = db.cursor.fetchall()
        for col in columns:
            cid, name, dtype, notnull, default, pk = col
            print(f"  - {name} ({dtype}) {'NOT NULL' if notnull else ''} {'PK' if pk else ''}")

